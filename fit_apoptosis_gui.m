classdef fit_apoptosis_gui < handle
% FIT_APOPTOSIS_GUI Graphical user interface for fit_apoptosis
%
% This GUI is not finished and cannot be used for fitting single-cell
% fluorescence traces yet.
%
% Copyright © 2018 Daniel Woschée <daniel.woschee@physik.lmu.de>
% Faculty of Physics / Ludwig-Maximilians-Universität München
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License version 2
% as published by the Free Software Foundation.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program. If not, see <https://www.gnu.org/licenses/>.

	properties
		%% GUI elements
		Figure
		Close_button
		Save_button
		Start_button

		Groups_panel
		GroupsAdd_button
		GroupsRename_button
		GroupsDelete_button
		GroupsList_box

		Group_panel
		GroupAdd_button
		GroupRemove_button
		GroupList_box
		GroupOption_panel
		GroupModel_label
		GroupModel_popup
		GroupOutdir_label
		GroupOutdir_edit
		GroupOutdir_button
		GroupOption_check
		GroupTimeScale_label
		GroupTimeScale_edit
		GroupTimeOffset_label
		GroupTimeOffset_edit
		GroupTimeUnit_label
		GroupTimeUnit_edit

		Options_panel
		TimeOptions_panel
		TimeScale_edit
		TimeOffset_edit
		TimeUnit_edit
		TempDir_edit
		TempDir_button
		OutputOptions_panel
		OutDebug_check
		OutMs_check
		OutSingle_check
		OutTotal_check
		OutParams_check
		OutStates_check
		OutSimulated_check
		OutTemp_check

		%% Data
		general_options = struct( ...
			'timeScale', 1/6, ...
			'timeOffset', 0, ...
			'timeUnit', 'h', ...
			'tempDir', '' ...
			);

		group_struct = struct( ...
			'name', {}, ...
			'files', {}, ...
			'model', {}, ...
			'outdir', {}, ...
			'specificTimeOptions', {}, ...
			'timeScale', {}, ...
			'timeOffset', {}, ...
			'timeUnit', {} ...
			);

		output_options = struct( ...
			'temp', true, ...
			'debug', true, ...
			'single', true, ...
			'total', true, ...
			'simulated', true, ...
			'params', true, ...
			'states', true, ...
			'ms', false ...
			);

		new_group_index = 0;
		active_group = 0;
	end

	methods
		function app = fit_apoptosis_gui
			% Constructor
			app.buildApp;
			set(app.Figure, 'Visible', 'on')
		end

		function buildApp(app)
			%% Builds the GUI
			% Main elements
			app.Figure = figure( ...
				'MenuBar', 'none', ...
				'NumberTitle', 'off', ...
				'Name', 'Cell Trace Fitter', ...
				'Units', 'normalized', ...
				'Visible', 'off', ...
				'CloseRequestFcn', @app.closeApp ...
				);
			app.Close_button = uicontrol( ...
				app.Figure, ...
				'Style', 'pushbutton', ...
				'String', 'Close', ...
				'Units', 'normalized', ...
				'Position', [ 0.51 0.01 (0.5/3-0.02) 0.08], ...
				'Callback', @app.closeApp ...
				);
			app.Save_button = uicontrol( ...
				app.Figure, ...
				'Style', 'pushbutton', ...
				'String', 'Save', ...
				'Units', 'normalized', ...
				'Position', [ (4/6+0.01) 0.01 (0.5/3-0.02) 0.08], ...
				'Callback', @app.savePrefs ...
				);
			app.Start_button = uicontrol( ...
				app.Figure, ...
				'Style', 'pushbutton', ...
				'String', 'Start', ...
				'Units', 'normalized', ...
				'Position', [ (5/6+0.01) 0.01 (0.5/3-0.02) 0.08], ...
				'Callback', @app.startRun ...
				);

			% Groups panel
			app.Groups_panel = uipanel( ...
				app.Figure, ...
				'Title', 'Groups', ...
				'Units', 'normalized', ...
				'Position', [0.01 0.71 0.48 0.28] ...
				);
			app.GroupsAdd_button = uicontrol( ...
				app.Groups_panel, ...
				'Style', 'pushbutton', ...
				'String', 'New', ...
				'Units', 'normalized', ...
				'Position', [0.02 0.8 1/3-0.02 0.2], ...
				'Callback', @app.addGroup ...
				);
			app.GroupsRename_button = uicontrol( ...
				app.Groups_panel, ...
				'Style', 'pushbutton', ...
				'String', 'Rename', ...
				'Units', 'normalized', ...
				'Position', [1/3+0.01 0.8 1/3-0.02 0.2], ...
				'Callback', @app.renameGroup ...
				);
			app.GroupsDelete_button = uicontrol( ...
				app.Groups_panel, ...
				'Style', 'pushbutton', ...
				'String', 'Delete', ...
				'Units', 'normalized', ...
				'Position', [2/3+0.01 0.8 1/3-0.02 0.2], ...
				'Callback', @app.deleteGroup ...
				);
			app.GroupsList_box = uicontrol( ...
				app.Groups_panel, ...
				'Style', 'listbox', ...
				'Units', 'normalized', ...
				'Position', [0.02, 0.02, 0.96, 0.76], ...
				'Max', inf, ...
				'Min', 0, ...
				'Callback', @app.refreshGroupView ...
				);

			% Group (detailed view) panel
			app.Group_panel = uipanel( ...
				app.Figure, ...
				'Title', 'Group 1', ...
				'Units', 'normalized', ...
				'Position', [0.51 0.11 0.48 0.88] ...
				);
			app.GroupAdd_button = uicontrol( ...
				app.Group_panel, ...
				'Style', 'pushbutton', ...
				'String', 'Add file …', ...
				'Units', 'normalized', ...
				'Position', [0.02 0.94 0.46 0.06], ...
				'Callback', @app.addFile ...
				);
			app.GroupRemove_button = uicontrol( ...
				app.Group_panel, ...
				'Style', 'pushbutton', ...
				'String', 'Remove file', ...
				'Units', 'normalized', ...
				'Position', [0.52 0.94 0.46 0.06], ...
				'Callback', @app.removeFile ...
				);
			app.GroupList_box = uicontrol( ...
				app.Group_panel, ...
				'Style', 'listbox', ...
				'Units', 'normalized', ...
				'Position', [0.02 0.52 0.96 0.4] ...
				);

			% Group options
			app.GroupOption_panel = uipanel( ...
				app.Group_panel, ...
				'BorderType', 'none', ...
				'Units', 'normalized', ...
				'Position', [0.02 0.02 0.96 0.48] ...
				);
			app.GroupModel_label = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'text', ...
				'String', 'Model:', ...
				'Units', 'normalized', ...
				'Position', [0 0.85 0.28 0.15], ...
				'HorizontalAlignment', 'left' ...
				);
			app.GroupModel_popup = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'popupmenu', ...
				'String', 'marker', ...
				'Units', 'normalized', ...
				'Position', [0.32 0.85 0.68 0.15] ...
				);
			app.GroupOutdir_label = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'text', ...
				'String', 'Out dir:', ...
				'Units', 'normalized', ...
				'Position', [0 0.70 0.28 0.15], ...
				'HorizontalAlignment', 'left' ...
				);
			app.GroupOutdir_edit = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'edit', ...
				'Units', 'normalized', ...
				'Position', [0.32 0.70 0.53 0.15] ...
				);
			app.GroupOutdir_button = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'pushbutton', ...
				'String', '…', ...
				'Units', 'normalized', ...
				'Position', [0.89 0.70 0.11 0.15], ...
				'Callback', @app.addGroupOutdir ...
				);
			app.GroupOption_check = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'checkbox', ...
				'String', 'Enable group-specific time settings', ...
				'Units', 'normalized', ...
				'Position', [0 0.45 1 0.25], ...
				'Callback', @app.toggleGroupSpecificTimeSettings, ...
				'Value', false ...
				);

			% Group specific time options
			app.GroupTimeScale_label = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'text', ...
				'String', 'Time scale:', ...
				'HorizontalAlignment', 'left', ...
				'Units', 'normalized', ...
				'Position', [0 0.3 0.4 0.15], ...
				'Enable', 'off' ...
				);
			app.GroupTimeScale_edit = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'edit', ...
				'String', num2str(1/6), ...
				'Units', 'normalized', ...
				'Position', [0.45 0.3 0.55 0.15], ...
				'Enable', 'off' ...
				);
			app.GroupTimeOffset_label = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'text', ...
				'String', 'Time offset:', ...
				'HorizontalAlignment', 'left', ...
				'Units', 'normalized', ...
				'Position', [0 0.15 0.4 0.15], ...
				'Enable', 'off' ...
				);
			app.GroupTimeOffset_edit = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'edit', ...
				'String', num2str(0), ...
				'Units', 'normalized', ...
				'Position', [0.45 0.15 0.55 0.15], ...
				'Enable', 'off' ...
				);
			app.GroupTimeUnit_label = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'text', ...
				'String', 'Time unit:', ...
				'HorizontalAlignment', 'left', ...
				'Units', 'normalized', ...
				'Position', [0 0 0.4 0.15], ...
				'Enable', 'off' ...
				);
			app.GroupTimeUnit_edit = uicontrol( ...
				app.GroupOption_panel, ...
				'Style', 'edit', ...
				'String', 'h', ...
				'Units', 'normalized', ...
				'Position', [0.45 0 0.55 0.15], ...
				'Enable', 'off' ...
				);

			% Options panel
			app.Options_panel = uipanel( ...
				app.Figure, ...
				'Title', 'Options', ...
				'Units', 'normalized', ...
				'Position', [0.01 0.01 0.48 0.68] ...
				);

			% Time options panel
			app.TimeOptions_panel = uipanel( ...
				app.Options_panel, ...
				'BorderType', 'none', ...
				'Units', 'normalized', ...
				'Position', [0.02 0.72 0.96 0.26] ...
				);
			uicontrol( ...
				app.TimeOptions_panel, ...
				'Style', 'text', ...
				'String', 'Time scale:', ...
				'HorizontalAlignment', 'left', ...
				'Units', 'normalized', ...
				'Position', [0 2/3 0.4 1/3] ...
				);
			app.TimeScale_edit = uicontrol( ...
				app.TimeOptions_panel, ...
				'Style', 'edit', ...
				'String', num2str(1/6), ...
				'Units', 'normalized', ...
				'Position', [0.45 2/3 0.55 1/3] ...
				);
			uicontrol( ...
				app.TimeOptions_panel, ...
				'Style', 'text', ...
				'String', 'Time offset:', ...
				'HorizontalAlignment', 'left', ...
				'Units', 'normalized', ...
				'Position', [0 1/3 0.4 1/3] ...
				);
			app.TimeOffset_edit = uicontrol( ...
				app.TimeOptions_panel, ...
				'Style', 'edit', ...
				'String', num2str(0), ...
				'Units', 'normalized', ...
				'Position', [0.45 1/3 0.55 1/3] ...
				);
			uicontrol( ...
				app.TimeOptions_panel, ...
				'Style', 'text', ...
				'String', 'Time unit:', ...
				'HorizontalAlignment', 'left', ...
				'Units', 'normalized', ...
				'Position', [0 0 0.4 1/3] ...
				);
			app.TimeUnit_edit = uicontrol( ...
				app.TimeOptions_panel, ...
				'Style', 'edit', ...
				'String', 'h', ...
				'Units', 'normalized', ...
				'Position', [0.45 0 0.55 1/3] ...
				);

			% Temporary directory options
			uicontrol( ...
				app.Options_panel, ...
				'Style', 'text', ...
				'String', 'Temp dir:', ...
				'HorizontalAlignment', 'left', ...
				'Units', 'normalized', ...
				'Position', [0.02 0.62 0.26 0.26/3] ...
				);
			app.TempDir_edit = uicontrol( ...
				app.Options_panel, ...
				'Style', 'edit', ...
				'Units', 'normalized', ...
				'Position', [0.32 0.62 0.51 0.26/3] ...
				);
			app.TempDir_button = uicontrol( ...
				app.Options_panel, ...
				'Style', 'pushbutton', ...
				'String', '…', ...
				'Units', 'normalized', ...
				'Position', [0.87 0.62 0.11 0.26/3], ...
				'Callback', @app.browseTempDir ...
				);
		
			% Output options
			app.OutputOptions_panel = uipanel( ...
				app.Options_panel, ...
				'BorderType', 'none', ...
				'Units', 'normalized', ...
				'Position', [0.02 0.02 0.96 0.56] ...
				);
			h_ckbx = 1/8;
			app.OutTemp_check = uicontrol( ...
				app.OutputOptions_panel, ...
				'Style', 'checkbox', ...
				'String', 'Export temporary data', ...
				'Value', true, ...
				'Units', 'normalized', ...
				'Position', [0 7*h_ckbx 1 h_ckbx] ...
				);
			app.OutDebug_check = uicontrol( ...
				app.OutputOptions_panel, ...
				'Style', 'checkbox', ...
				'String', 'Export debug figure', ...
				'Value', true, ...
				'Units', 'normalized', ...
				'Position', [0 6*h_ckbx 1 h_ckbx] ...
				);
			app.OutSingle_check = uicontrol( ...
				app.OutputOptions_panel, ...
				'Style', 'checkbox', ...
				'String', 'Export single trace plots', ...
				'Value', true, ...
				'Units', 'normalized', ...
				'Position', [0 5*h_ckbx 1 h_ckbx] ...
				);
			app.OutTotal_check = uicontrol( ...
				app.OutputOptions_panel, ...
				'Style', 'checkbox', ...
				'String', 'Export file-wise plot', ...
				'Value', true, ...
				'Units', 'normalized', ...
				'Position', [0 4*h_ckbx 1 h_ckbx] ...
				);
			app.OutSimulated_check = uicontrol( ...
				app.OutputOptions_panel, ...
				'Style', 'checkbox', ...
				'String', 'Export fitted traces', ...
				'Value', true, ...
				'Units', 'normalized', ...
				'Position', [0 3*h_ckbx 1 h_ckbx] ...
				);
			app.OutParams_check = uicontrol( ...
				app.OutputOptions_panel, ...
				'Style', 'checkbox', ...
				'String', 'Export fit parameters', ...
				'Value', true, ...
				'Units', 'normalized', ...
				'Position', [0 2*h_ckbx 1 h_ckbx] ...
				);
			app.OutStates_check = uicontrol( ...
				app.OutputOptions_panel, ...
				'Style', 'checkbox', ...
				'String', 'Export state values', ...
				'Value', true, ...
				'Units', 'normalized', ...
				'Position', [0 1*h_ckbx 1 h_ckbx] ...
				);
			app.OutMs_check = uicontrol( ...
				app.OutputOptions_panel, ...
				'Style', 'checkbox', ...
				'String', 'Export multistart information', ...
				'Value', false, ...
				'Units', 'normalized', ...
				'Position', [0 0*h_ckbx 1 h_ckbx] ...
				);

			% Initialize GUI
			app.addGroup
		end

		%% Callback functions
		function closeApp(app, ~, ~)
			% Deletion function
			delete(app.Figure)
		end

		function savePrefs(app, ~, ~)
			% Function for saving/exporting preferences
			disp('Dummy function: savePrefs')
		end

		function startRun(app, ~, ~)
			% Function for starting the fit routine
			disp('Dummy function: startRun')
		end

		function addGroup(app, ~, ~)
			%% Function for adding a new group

			% Initialize a new group
			app.initNewGroup

			% Refresh GroupsList
			app.refreshGroupsList
		end

		function renameGroup(app, ~, ~)
			%% Function for renaming an existing group

			% Get first selected index from listbox
			index = app.GroupsList_box.Value;

			if length(index) < 1
				return
			end

			% Prompt for new name
			index = index(1);
			old_name = app.group_struct(index).name;
			new_name = inputdlg( ...
				['Enter the new name for group “' old_name '”:'], ...
				'Rename group', ...
				1, ...
				{ old_name } ...
				);

			% Test new name for validity
			if isempty(new_name) || isempty(new_name{1})
				% The new name must not be empty
				return
			end

			% Extract name from cellstring
			new_name = new_name{1};

			% Test if name exists already
			for i_group = 1:length(app.group_struct)
				if i_group == index
					% Skip own name
					continue
				end

				if strcmpi(new_name, app.group_struct(i_group).name)
					% New name exists already; quit
					return
				end
			end

			% If we arrive here, the new name is valid
			% Change the name, …
			app.group_struct(index).name = new_name;

			% … refresh GroupsList, …
			app.refreshGroupsList

			% … select the changed group, …
			app.GroupsList_box.Value = index;

			% … and refresh group view
 			app.refreshGroupView
		end

		function deleteGroup(app, ~, ~)
			%% Function for deleting an existing group

			% Get selected indices from listbox
			indices = app.GroupsList_box.Value;

			% Remove groups at given indices from group_struct
			for index = length(indices):-1:1
				i_group = indices(index);
				app.group_struct(i_group) = [];

				% Update group to be shown in Group view
				if i_group == app.active_group
					app.active_group = 0;
				elseif i_group < app.active_group
					app.active_group = app.active_group - 1;
				end
			end

			% Refresh GroupsList
			app.refreshGroupsList
			app.refreshGroupView
		end

		function browseTempDir(app, ~, ~)
			% Function for selecting the temp dir
			disp('Dummy function: browseTempDir')
		end

		function addFile(app, ~, ~)
			% Function for adding a file to a group
			disp('Dummy function: addFile')
		end

		function removeFile(app, ~, ~)
			% Function for removing a file from a group
			disp('Dummy function: removeFile')
		end

		function addGroupOutdir(app, ~, ~)
			% Function for adding group-specific out directory
			disp('Dummy function: addGroupOutdir')
		end

		function toggleGroupSpecificTimeSettings(app, ~, ~)
			%% Callback function to toggle group specific time settings

			% Query whether group-specific time settings are enabled
			app.group_struct(app.active_group).specificTimeOptions = app.GroupOption_check.Value;

			% Update group-specific time settings controls
			app.toggleGroupTimeOptions
		end

		function toggleGroupTimeOptions(app, val)
			%% Function for toggling group specific time settings

			% Get value to be used
			if nargin < 2
				val = app.GroupOption_check.Value;
			end

			% Toggle control elements
			if val
				app.GroupTimeScale_label.Enable = 'on';
				app.GroupTimeScale_edit.Enable = 'on';
				app.GroupTimeOffset_label.Enable = 'on';
				app.GroupTimeOffset_edit.Enable = 'on';
				app.GroupTimeUnit_label.Enable = 'on';
				app.GroupTimeUnit_edit.Enable = 'on';
			else
				app.GroupTimeScale_label.Enable = 'off';
				app.GroupTimeScale_edit.Enable = 'off';
				app.GroupTimeOffset_label.Enable = 'off';
				app.GroupTimeOffset_edit.Enable = 'off';
				app.GroupTimeUnit_label.Enable = 'off';
				app.GroupTimeUnit_edit.Enable = 'off';
			end
		end

		function refreshGroupView(app, ~, ~)
			%% Refreshes the content of the Group panel

			% Get selected groups
			selected_groups = app.GroupsList_box.Value;

			% If at least one group is selected and active_group is not
			% in selection, then update active_group.
			% In all other cases, do not update active_group
			if ~isempty(selected_groups) && ~ismember(app.active_group, selected_groups)
				app.active_group = selected_groups(1);
			end

% 			% DEBUG MESSAGE
% 			disp(['Showing group: ' num2str(app.active_group)])

			% If active_group is set, update group view.
			% Else, disable group view
			ag = app.active_group;
			if ag
				% Group to be viewed; activate view and update values
				app.Group_panel.Title = app.group_struct(ag).name;
				app.GroupAdd_button.Enable = 'on';
				app.GroupRemove_button.Enable = 'on';
				app.GroupList_box.String = app.group_struct(ag).files;
				app.GroupList_box.Enable = 'on';
				app.GroupModel_label.Enable = 'on';
				app.GroupModel_popup.Value = app.group_struct(ag).model;
				app.GroupModel_popup.Enable = 'on';
				app.GroupOutdir_label.Enable = 'on';
				app.GroupOutdir_edit.String = app.group_struct(ag).outdir;
				app.GroupOutdir_edit.Enable = 'on';
				app.GroupOutdir_button.Enable = 'on';
				app.GroupOption_check.Value = app.group_struct(ag).specificTimeOptions;
				app.GroupOption_check.Enable = 'on';

				app.GroupTimeScale_edit.String = app.group_struct(ag).timeScale;
				app.GroupTimeOffset_edit.String = app.group_struct(ag).timeOffset;
				app.GroupTimeUnit_edit.String = app.group_struct(ag).timeUnit;
				app.toggleGroupTimeOptions

			else
				% No group to be viewed; disable group view
				app.Group_panel.Title = 'No group selected';
				app.GroupAdd_button.Enable = 'off';
				app.GroupRemove_button.Enable = 'off';
				app.GroupList_box.Enable = 'off';
				app.GroupList_box.String = {};
				app.GroupModel_label.Enable = 'off';
				app.GroupModel_popup.Enable = 'off';
				app.GroupModel_popup.Value = 1;
				app.GroupOutdir_label.Enable = 'off';
				app.GroupOutdir_edit.Enable = 'off';
				app.GroupOutdir_edit.String = '';
				app.GroupOutdir_button.Enable = 'off';
				app.GroupOption_check.Enable = 'off';
				app.GroupOption_check.Value = false;

				app.toggleGroupTimeOptions(false)
				app.GroupTimeScale_edit.String = app.general_options.timeScale;
				app.GroupTimeOffset_edit.String = app.general_options.timeOffset;
				app.GroupTimeUnit_edit.String = app.general_options.timeUnit;
			end
		end

		%% Data operation functions
		function initNewGroup(app)
			%% Creates a new group

			% Get index for name of new group
			app.new_group_index = app.new_group_index + 1;

			% Get index of new element in group_struct
			index = length(app.group_struct) + 1;

			app.group_struct(index).name = ['Group ' num2str(app.new_group_index)];
			app.group_struct(index).files = {};
			app.group_struct(index).model = 1;
			app.group_struct(index).specificTimeOptions = false;
			app.group_struct(index).timeScale = app.general_options.timeScale;
			app.group_struct(index).timeOffset = app.general_options.timeOffset;
			app.group_struct(index).timeUnit = app.general_options.timeUnit;
		end

		function refreshGroupsList(app)
			%% Refreshes the GroupsList

			% Get a cell string of groups
			grouplist = cell(length(app.group_struct), 1);
			for i_group = 1:length(app.group_struct)
				grouplist{i_group} = app.group_struct(i_group).name;
			end

			% Reset selection in GroupsList
			app.GroupsList_box.Value = [];

			% Add the group to the groups list box
			app.GroupsList_box.String = grouplist;
		end
	end

end

