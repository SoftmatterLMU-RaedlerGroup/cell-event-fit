function [] = fit_apoptosis_output(Ffiles, loop_start)
%fit_apoptosis_output writes the results to files
%
% Input parameters:
%	Ffiles		The bash-wildcarded *.mat files generated by fit_apoptosis(_batch)?.m
%	loop_start	Vector indicating which traces/files to plot, wherein:
%					loop_start(1)	first trace index to be used
%					loop_start(2)	first file index to be used
%					Set to 0 to loop over all traces/files.
%					Set to NaN to skip corresponding loop.
%
% Copyright © 2018 Daniel Woschée <daniel.woschee@physik.lmu.de>
% Faculty of Physics / Ludwig-Maximilians-Universität München
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License version 2
% as published by the Free Software Foundation.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program. If not, see <https://www.gnu.org/licenses/>.

%% Get cell array of matfiles
if ischar(Ffiles)
	Ffiles = strsplit(ls(Ffiles));
end

%% Get plot range
if nargin < 2
	loop_start = [];
end

%% Export results
for F_ind = 1:length(Ffiles)

	if isempty(Ffiles{F_ind})
		continue
	elseif ~exist(Ffiles{F_ind}, 'file')
		disp(['File not found: ' Ffiles{F_ind}])
		continue
	end

	Ffile = Ffiles{F_ind};

	disp([ get_time 'Exporting data from:' ])
	disp(Ffile)

	plotFitResults(Ffile, loop_start);

	%% Print final log message
	mf = matfile(Ffile);
	disp([get_time 'FINISHED – ' num2str(mf.ntraces) ' ' mf.log_trace ' in ' num2str(mf.ndatafiles) ' ' mf.log_file ' processed.'])
end